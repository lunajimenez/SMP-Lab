# -*- coding: utf-8 -*-
"""lab2_SMP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u7Heh651oTMmanr-c85SoCYFSWH3QwhV
"""

import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display

# Parámetros del Brazo Robótico (manipulador)
L1 = 1.0  # Longitud del primer eslabón
L2 = 0.8  # Longitud del segundo eslabón

# Definimos nuestra cinemática Inversa (calcular los ángulos theta1 y theta2 para alcanzar (x_d, y_d)
def cinematica_inversa(x_d, y_d):
    D = (x_d**2 + y_d**2 - L1**2 - L2**2) / (2 * L1 * L2)
    if np.abs(D) > 1:  # Si el punto está fuera del alcance del robot manipulador
      return None, None
    else:
      theta2 = np.arctan2(np.sqrt(1 - D**2), D)
      theta1 = np.arctan2(y_d, x_d) - np.arctan2(L2 * np.sin(theta2), L1 + L2 * np.cos(theta2))
    return theta1, theta2

# Actualización sistema
def actualizar(x_d, y_d):
    theta1, theta2 = cinematica_inversa(x_d, y_d)

    if theta1 is None or theta2 is None:
        print("Punto fuera del alcance del robot manipulador")
        return

    # Posiciones del manipulador
    x1, y1 = L1 * np.cos(theta1), L1 * np.sin(theta1)
    x2, y2 = x_d, y_d
    #x2, y2 = L1 * np.cos(theta1) + L2 * np.cos(theta1 + theta2), L1 * np.sin(theta1) + L2 * np.sin(theta1 + theta2)

    # Brazo Robótico
    plt.plot([0, x1, x2], [0, y1, y2], 'o-', markersize=8, linewidth=3, label="Brazo")
    plt.plot(x_d, y_d, 'rx', markersize=10, label="Objetivo")
    plt.xlim(-1.5, 1.5)
    plt.ylim(-1.5, 1.5)
    plt.xlabel("X (m)")
    plt.ylabel("Y (m)")
    plt.title("Brazo Robótico (robot manipulador) de 2 Eslabones")
    plt.legend()
    plt.grid()
    plt.show()

# Definimos sliders
slider_x = widgets.FloatSlider(min=-1.5, max=1.5, step=0.05, value=1, description="Posición X")
slider_y = widgets.FloatSlider(min=-1.5, max=1.5, step=0.05, value=1, description="Posición Y")

# Interfaz
widgets.interactive(actualizar, x_d=slider_x, y_d=slider_y)